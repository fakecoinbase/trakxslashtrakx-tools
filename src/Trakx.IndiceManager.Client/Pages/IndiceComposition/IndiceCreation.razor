@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using Microsoft.AspNetCore.Authentication.OAuth
@using Microsoft.Extensions.Logging
@using Trakx.Common.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Charts
@using Trakx.Common.Composition
@using Trakx.Common.Extensions
@using Trakx.IndiceManager.ApiClient
@using Action = Syncfusion.Blazor.Grids.Action
@using ActionCompleteEventArgs = Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs
@using Trakx.Common.Models
@page "/IndiceComposition/indice_creation"
@inject ILogger<IndiceCreation> Logger
@inject IIndiceCreationClient ApiClient
@inject IWeightCalculator WeightCalculator

<SfToast @ref="Toaster" ShowCloseButton="true" ShowProgressBar="true">
    <ToastPosition X="Center" Y="Bottom"></ToastPosition>
</SfToast>
<div class="container">
    <EditForm OnInvalidSubmit="Failure" OnValidSubmit="Success" EditContext="@EditContext">
        <DataAnnotationsValidator />
        <fieldset>
            <legend>Indice Creation</legend>
            <div>
                <fieldset>
                    <legend>Indice main features</legend>
                    <div class="form-row col-3">
                        <SfTextBox PlaceHolder="Name" @bind-Value="IndexName" @ref="NameTextBox" FloatLabelType="FloatLabelType.Auto" />
                    </div>
                    <div class="form-row col-3">
                        <SfTextBox PlaceHolder="Symbol" @bind-Value="IndexSymbol" @ref="SymbolTextBox" FloatLabelType="FloatLabelType.Auto" />
                    </div>
                    <div class="form-row col-3">
                        <SfTextBox PlaceHolder="Description" @bind-Value="IndexDescription" @ref="DescriptionTextBox" FloatLabelType="FloatLabelType.Auto" />
                    </div>
                </fieldset>
            </div>
            <div>
                <fieldset>
                    <legend>Indice Composition</legend>
                    <row id="box-indice-composition">
                        <div>
                            <div class="form-row col-3">
                                <SfNumericTextBox TValue="Nullable<decimal>" PlaceHolder="Targeted NAV (USDc)" Format="c2" Locale="@_localeString"
                                                  ValueChanged="TargetNavChanged" Value="TargetedNav"
                                                  @ref="TargetNavTextBox" FloatLabelType="FloatLabelType.Auto"
                                                  Enabled="!IsUsdcUnit" />
                            </div>
                            <div class="form-row">
                                <label>Equal Weights</label>
                                <SfCheckBox Checked="@EqualWeights" @ref="EqualWeightCheckBox" CheckedChanged="EqualWeightsChanged" />
                            </div>
                            @if (!EqualWeights)
                            {
                                <div class="form-row">
                                    <label>Customise component weight using </label>
                                    <SfDropDownList TValue="WeightUnitType" TItem="string" @bind-Value="WeightUnit"
                                                    DataSource="Enum.GetNames(typeof(WeightUnitType))"
                                                    @ref="WeightUnitsDropdown">
                                        <DropDownListEvents TValue="string" ValueChange="RefreshWeights" />
                                    </SfDropDownList>
                                </div>
                            }

                        </div>
                        <div>
                            <h3>Indice Components</h3>
                            <row id="grid" class="col-9">
                                <SfGrid DataSource="ConstituentRows" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })"
                                        @ref="ConstituentsGrid" Locale="@_localeString">
                                    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" />
                                    <GridEvents OnActionBegin="CheckRowChange" TValue="ConstituentRow" OnActionComplete="RefreshIfNeeded" />
                                    <GridColumns>
                                        <GridColumn Field=@nameof(ConstituentRow.Symbol) IsPrimaryKey="true" @ref="SymbolGridColumn" TextAlign="TextAlign.Center">

                                            <EditTemplate Context="editTemplate_context">
                                                @if (string.IsNullOrEmpty((editTemplate_context as ConstituentRow).Symbol))
                                                {
                                                    <SfAutoComplete TItem="string" TValue="string" ID="Symbol" Value="@((editTemplate_context as ConstituentRow).Symbol)"
                                                                    DataSource="@_allowedConstituentSymbols.Except(ConstituentRows.Select(c => c.Symbol))" AllowCustom=false>
                                                        <AutoCompleteFieldSettings Value="Symbol"></AutoCompleteFieldSettings>
                                                    </SfAutoComplete>
                                                }
                                                else
                                                {
                                                    <SfTextBox Readonly="true" Value="@((editTemplate_context as ConstituentRow).Symbol)" ID="Symbol"></SfTextBox>
                                                }

                                            </EditTemplate>
                                        </GridColumn>
                                        <GridColumn Field="@WeightFieldName"
                                                    HeaderText="Target Relative Weight" TextAlign="TextAlign.Center" EditType="EditType.NumericEdit" Format="p6"
                                                    AllowEditing="@(!EqualWeights && !IsUsdcUnit)" DefaultValue="1">
                                        </GridColumn>
                                        <GridColumn Field=@nameof(ConstituentRow.Value)
                                                    HeaderText="Target USDc Value" TextAlign="TextAlign.Center" EditType="EditType.NumericEdit" Format="c2"
                                                    AllowEditing="@(!EqualWeights && IsUsdcUnit)" DefaultValue="10">
                                        </GridColumn>

                                    </GridColumns>
                                </SfGrid>
                            </row>
                        </div>
                    </row>
                    <row>
                        <SfButton Type="button" IsPrimary="false" OnClick="CalculateNav" Disabled="@CalculateNavDisabled" @ref="CalculateNavButton">Calculate NAV</SfButton>
                    </row>
                </fieldset>
            </div>
            <div>
                <fieldset>
                    <legend>NAV Calculation</legend>
                    
                        <div>
                            <SfAccumulationChart @ref="ComponentsWeightsChart" Height="@(ConstituentRows.Any() ? "auto" : "0px")">
                                <AccumulationChartSeriesCollection>
                                    <AccumulationChartSeries DataSource="ConstituentRows" XName="Symbol" YName="Value">
                                        <AccumulationDataLabelSettings Visible="true" Name="Symbol"></AccumulationDataLabelSettings>
                                    </AccumulationChartSeries>
                                </AccumulationChartSeriesCollection>
                                <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                                <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                            </SfAccumulationChart>
                        </div>
                    

                    <div>
                        Calculated Nav : @CalculatedNav
                    </div>
                    <div>
                        <SfButton IsPrimary="true" Type="submit">Publish Indice</SfButton>
                        <SfButton IsPrimary="false" Type="button" @ref="SaveIndiceButton" OnClick="SaveIndice">Save Indice</SfButton>
                    </div>
                </fieldset>
            </div>
        </fieldset>
        <ValidationSummary />
    </EditForm>
</div>

@code {
    #region Variables
#nullable disable
    public SfTextBox NameTextBox { get; set; }
    public SfTextBox DescriptionTextBox { get; set; }
    public SfTextBox SymbolTextBox { get; set; }
    public SfNumericTextBox<decimal?> TargetNavTextBox { get; set; }
    public SfCheckBox EqualWeightCheckBox { get; set; }
    public SfDropDownList<WeightUnitType, string> WeightUnitsDropdown { get; set; }
    public SfGrid<ConstituentRow> ConstituentsGrid { get; set; }
    public SfToast Toaster { get; set; }
    public SfButton CalculateNavButton { get; set; }
    public GridColumn SymbolGridColumn { get; set; }
    public EditContext EditContext { get; set; }
    public SfAccumulationChart ComponentsWeightsChart { get; set; }
    public SfButton SaveIndiceButton { get; set; }
#nullable enable

    [Required] public string? IndexName;
    [Required] public string? IndexSymbol;
    [Required] public string? IndexDescription;
    [Required] public decimal? TargetedNav;

    public bool EqualWeights = false;
    private string WeightFieldName => EqualWeights ? nameof(ConstituentRow.EqualWeight) : nameof(ConstituentRow.CustomWeight);
    public WeightUnitType WeightUnit = WeightUnitType.USDc;
    private bool IsUsdcUnit => WeightUnit == WeightUnitType.USDc;
    private string ChartVisibility => ConstituentRows.Count > 1 ? "visible" : "collapsed";

    public List<ConstituentRow> ConstituentRows { get; set; } = new List<ConstituentRow>();
    private bool CalculateNavDisabled => !ConstituentRows.Any();

    private decimal? CalculatedNav { get; set; }

    private const string _localeString = "en-US";
    private readonly List<string> _allowedConstituentSymbols = new List<string>();
    public static List<ComponentDetailModel>? KnownComponents { get; set;}

    public class ConstituentRow
    {
        public string Symbol { get; set; }
        public decimal? Value { get; set; }
        //use 2 weights to not loose values when the user switch
        //back and forth to EqualWeight
        public decimal? CustomWeight { get; set; }
        public decimal EqualWeight { get; set; }
        public decimal GetWeight(bool equalWeight) => equalWeight ? EqualWeight : CustomWeight ?? EqualWeight;

        public ComponentDetailModel ToComponentDetailModel(bool equalWeight)
        {
            var componentDetails = GetComponentDetails(Symbol);
            return new ComponentDetailModel {
                Symbol = Symbol,
                Name = componentDetails.Name,
                Quantity = null,
                Weight = GetWeight(equalWeight),
                UsdcValue = Value,
                Address = componentDetails.Address,
                CoinGeckoId = componentDetails.CoinGeckoId
            };
        }
    }

    public static ComponentDetailModel GetComponentDetails(string symbol)
    {
        return KnownComponents.Find(o => o.Symbol == symbol);
    }

    private void ResetModel()
    {
        IndexName = null;
        IndexSymbol = null;
        IndexDescription = null;
        TargetedNav = null;
        CalculatedNav = null;
        EqualWeights = false;
        ConstituentRows = new List<ConstituentRow>();
    }

    public enum WeightUnitType
    {
        Percentage,
        USDc
    }
    #endregion

    #region Toast<>
    public async Task Failure()
    {
        await Toaster.Show(new ToastModel
        {
            Content = "Your transaction failed, please make sure that you filled correctly the form.",
            Title = "Error !",
        });
    }

    public async Task Success()
    {
        await Toaster.Show(new ToastModel
        {
            Content = "Congratulations, the Indice creation succeeded.",
            Title = "Success !",
        });
    }

    #endregion

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(this);
        try
        {
            KnownComponents = (await ApiClient.GetAllComponentsAsync()).Result;
            _allowedConstituentSymbols.AddRange(KnownComponents.Select(o => o.Symbol));
        }
        catch (Exception)
        {
            await Toaster.Show(new ToastModel { Title = "Error", Content = "Failed to retrieve available components from the Api.", CssClass = "e-toast-danger" });
        }

        Logger.LogInformation("IndexCreation page initialized");
    }

    #endregion

    #region Query Methods

    public async Task SaveIndice()
    {
        try
        {
            var indiceCompositionModel = ToIndiceCompositionModel();
            await ApiClient.SaveIndiceCompositionAsync(indiceCompositionModel);
            await Toaster.Show(new ToastModel { Title = "Success!", Content = "Indice added successfully to the database (not on chain).", CssClass = "e-toast-success" });
            ResetModel();
        }
        catch (ApiException ex)
        {
            await Toaster.Show(new ToastModel { Title = "Error!", Content = $"{ex.Response}", CssClass = "e-toast-danger" });
        }
    }

    public IndiceCompositionModel ToIndiceCompositionModel()
    {
        var compositionModel = new IndiceCompositionModel();
        var indiceDetailModel = new IndiceDetailModel
        {
            Symbol = IndexSymbol,
            Name = IndexName,
            CreationDate = DateTime.Now,
            Description = IndexDescription,
            Address = ""

        };
        compositionModel.IndiceDetail = indiceDetailModel;
        compositionModel.Symbol = IndexSymbol;
        compositionModel.TargetedNav = TargetedNav;
        compositionModel.Components = ConstituentRows.Select(c => c.ToComponentDetailModel(EqualWeights) ?? null).ToList();

        return compositionModel;
    }

    #endregion

    #region Other Methods

    public void CalculateNav(MouseEventArgs args)
    {
        CalculatedNav = (decimal)(new Random().NextDouble() + 10) * 10;
    }

    public async Task CheckRowChange(ActionEventArgs<ConstituentRow> args)
    {
        switch (args.RequestType)
        {
            case Action.Save:
                var newSymbol = args.Data.Symbol;
                if (!EqualWeights
                    && WeightUnit == WeightUnitType.Percentage
                    && ConstituentRows.Where(o => o.Symbol != newSymbol).Sum(o => o.GetWeight(EqualWeights)) + args.Data.GetWeight(EqualWeights) > 1m)
                {
                    await Toaster.Show(new ToastModel { Content = "Total weight should be less than 1.", TimeOut = 1500 });
                    args.Cancel = true;
                }
                if (ConstituentRows.Any(o => o.Symbol == newSymbol))
                {
                    await Toaster.Show(new ToastModel { Content = "This symbol is already added.", TimeOut = 1500 });
                    args.Cancel = true;
                }
                break;

        }
    }

    public void RefreshIfNeeded(ActionEventArgs<ConstituentRow> args)
    {
        switch (args.RequestType)
        {
            case Action.Save:
                RefreshWeights();
                break;
            case Action.Delete:
                RefreshWeights();
                break;
        }
    }

    private void EqualWeightsChanged(bool equalWeight)
    {
        EqualWeights = equalWeight;
        if (EqualWeights)
        {
            WeightUnit = WeightUnitType.Percentage;
        }
        RefreshWeights();
    }

    public void RefreshWeights()
    {
        if (!ConstituentRows.Any()) return;
        if (EqualWeights)
        {
            var newWeights = WeightCalculator.DistributeWeights(ConstituentRows.Select(c => c.Symbol).ToList());
            ConstituentRows.ForEach(c => c.EqualWeight = newWeights[c.Symbol]);
            if (TargetedNav.HasValue)
            {
                var newValues = WeightCalculator.CalculateUsdcValuesFromNavAndWeights(
                    ConstituentRows.ToDictionary(c => c.Symbol, c => c.EqualWeight), TargetedNav.Value);
                ConstituentRows.ForEach(c => c.Value = newValues[c.Symbol]);
            }
        }
        else if (WeightUnit == WeightUnitType.Percentage && TargetedNav.HasValue)
        {
            var newValues = WeightCalculator.CalculateUsdcValuesFromNavAndWeights(
                ConstituentRows.ToDictionary(c => c.Symbol, c => c.GetWeight(false)), TargetedNav.Value);
            ConstituentRows.ForEach(c => c.Value = newValues[c.Symbol]);
        }
        else
        {
            TargetedNav = ConstituentRows.Sum(c => c.Value ?? 0);
            var newWeights = WeightCalculator.CalculateWeightsFromUsdcValues(ConstituentRows.ToDictionary(c => c.Symbol, c => c.Value ?? 0));
            ConstituentRows.ForEach(c => c.CustomWeight = newWeights[c.Symbol]);
        }
        ConstituentsGrid.Refresh();
        ComponentsWeightsChart?.Refresh();
    }

    public void TargetNavChanged(decimal? newValue)
    {
        TargetedNav = newValue;
        RefreshWeights();
    }

    #endregion

}
