@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Logging
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Action = Syncfusion.Blazor.Grids.Action
@page "/IndiceComposition/indice_creation"
@inject ILogger<IndiceCreation> Logger


@*I didn't have time to find why this toaster doesn't work ...*@
<SfToast Title="Error" @ref="Toaster">
    <ToastPosition X="Center" Y="Center"></ToastPosition>
</SfToast>
<h1>Indice Creation</h1>
<div>
    <fieldset>
        <div>
            <h2>Indice main features</h2>
            <div class="form-row col-3">
                <SfTextBox PlaceHolder="Name" @bind-Value="Model.IndiceName" @ref="NameTextBox" FloatLabelType="FloatLabelType.Auto" />
            </div>
            <div class="form-row col-3">
                <SfTextBox PlaceHolder="Symbol" @bind-Value="Model.IndiceSymbol" @ref="SymbolTextBox" FloatLabelType="FloatLabelType.Auto" />
            </div>
            <div class="form-row col-3">
                <SfNumericTextBox PlaceHolder="Targeted NAV (USDc)" @bind-Value="Model.TargetedNav" Format="c2"
                                  @ref="TargetNavTextBox" FloatLabelType="FloatLabelType.Auto" Locale="@LocaleString" />
            </div>
        </div>
        <row id="box-indice-composition">
            <div>
                <h2>Indice composition</h2>
                <div class="form-row">
                    <label>Equal Weights</label>
                    <SfSwitch @bind-Checked="Model.EqualWeights" @ref="EqualWeightSwitch" />
                </div>
                @if (!Model.EqualWeights)
                {
                    <div class="form-row">
                        <label>Weight Units</label>
                        <SfDropDownList TValue="IndiceCreationModel.WeightUnitType" TItem="string" @bind-Value="Model.WeightUnit"
                                        DataSource="Enum.GetNames(typeof(IndiceCreationModel.WeightUnitType))"
                                        @ref="WeightUnitsDropdown">
                        </SfDropDownList>
                    </div>
                }

            </div>
            <div>
                <h3>Indice Components</h3>
                <row id="grid" class="col-9">
                    <SfGrid DataSource="Model.Components" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })"
                            @ref="ConstituentsGrid" Locale="LocaleString">
                        <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" />
                        <GridEvents OnActionBegin="CheckRowChange" TValue="ConstituentModel" />
                        <GridColumns>
                            <GridColumn Field=@nameof(ConstituentModel.Symbol) IsPrimaryKey="true" @ref="SymbolGridColumn">

                                <EditTemplate>
                                    @if (string.IsNullOrEmpty((context as ConstituentModel).Symbol))
                                    {
                                        <SfAutoComplete TItem="string" TValue="string" ID="Symbol" Value="@((context as ConstituentModel).Symbol)"
                                                        DataSource="@KnownErcTickers" AllowCustom=false>
                                            <AutoCompleteFieldSettings Value="Symbol"></AutoCompleteFieldSettings>
                                        </SfAutoComplete>
                                    }
                                    else
                                    {
                                        <SfTextBox Readonly="true" Value="@((context as ConstituentModel).Symbol)" ID="Symbol"></SfTextBox>
                                    }

                                </EditTemplate>

                            </GridColumn>
                            <GridColumn Field=@nameof(ConstituentModel.Weight) TextAlign="TextAlign.Right" EditType="EditType.NumericEdit"
                                        AllowEditing="@CustomWeights" DefaultValue="0.01">
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>

                </row>

            </div>
        </row>
        <row>
            <SfButton IsPrimary="true" OnClick="CalculateNav" Disabled="@CalculateNavDisabled" @ref="CalculateNavButton">Calculate NAV</SfButton>
        </row>
        <row>
            Calculated Nav : @CalculatedNav
        </row>
    </fieldset>
</div>

@code {
#nullable disable
    public SfTextBox NameTextBox { get; set; }
    public SfTextBox SymbolTextBox { get; set; }
    public SfNumericTextBox<decimal?> TargetNavTextBox { get; set; }
    public SfSwitch EqualWeightSwitch { get; set; }
    public SfDropDownList<IndiceCreationModel.WeightUnitType, string> WeightUnitsDropdown { get; set; }
    public SfGrid<ConstituentModel> ConstituentsGrid { get; set; }
    public SfToast Toaster { get; set; }
    public SfButton CalculateNavButton { get; set; }
    public GridColumn SymbolGridColumn { get; set; }
#nullable enable

    public IndiceCreationModel Model = new IndiceCreationModel();
    public string WeightColumnFormat => Model.WeightUnit == IndiceCreationModel.WeightUnitType.USDc ? "C2" : "##.####%";
    public bool CustomWeights => !Model.EqualWeights;
    public bool CalculateNavDisabled => Model?.Components?.Count == 0;
    public decimal CalculatedNav { get; set; }
    public string LocaleString { get; } = "en-US";

    #region Overrides of ComponentBase

    public List<string> KnownErcTickers { get; } = new List<string> { "ABC", "DEF", "GHI", "JKL", "MNO" };

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Logger.LogInformation("IndexCreation page initialised");
    }

    #endregion

    public void CalculateNav(MouseEventArgs args)
    {
        CalculatedNav = (decimal)(new Random().NextDouble() + 10) * 10;
    }

    public async Task CheckRowChange(ActionEventArgs<ConstituentModel> args)
    {
        switch (args.RequestType)
        {
            case Action.Save:
                var newSymbol = args.Data.Symbol;
                if (Model.Components.Any(c => c.Symbol == newSymbol))
                {
                    await Toaster.Show(new ToastModel { Content = $"Symbol {newSymbol} is already in use.", TimeOut = 1500 });
                    args.Cancel = true;
                }
                //redistribute weights
                break;
            case Action.Delete:
                //redistribute weights
                break;
        }
    }

    #region IndiceCreationModel class

    public class IndiceCreationModel
    {
        public enum WeightUnitType { Percentage, USDc }

        [Required]
        public string? IndiceName { get; set; }
        [Required]
        public string? IndiceSymbol { get; set; }
        [Required]
        public decimal? TargetedNav { get; set; }
        [Required]
        public bool EqualWeights { get; set; }
        [Required]
        public WeightUnitType WeightUnit { get; set; }
        [MinLength(1)]
        public List<ConstituentModel> Components { get; set; }


        public IndiceCreationModel()
        {
            IndiceName = null;
            IndiceSymbol = null;
            EqualWeights = false;
            TargetedNav = null;
            WeightUnit = WeightUnitType.Percentage;
            Components = new List<ConstituentModel>();
        }
    }

    public class ConstituentModel
    {
        //todo add a method to call the api and check the symbol is OK
        [Required]
        public string Symbol { get; set; }
        [Required, Range(1e-6, 1)]
        public decimal? Weight { get; set; }

        //todo check sum of weights, etc
        //see in Tools.CompositionHelper.AssignComponentWeights to see one way the weight is
        //sometimes assigned based on marketCap... I can explain as this is bad code. 💩
        public bool IsValid()
        {
            if (!string.IsNullOrEmpty(Symbol) && Weight != null && Weight > 0)
                return true;
            return false;
        }
    }
    #endregion
}
