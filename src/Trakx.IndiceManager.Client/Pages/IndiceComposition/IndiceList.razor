@page "/IndiceComposition/indice_list"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Data
@using System
@using Trakx.Common.Models
@using Trakx.IndiceManager.ApiClient
@inject IIndiceCreationClient ApiClient;
@inject NavigationManager NavManager

<SfToast @ref="Toaster" TimeOut=3000>
    <ToastPosition X="Center" Y="Bottom"></ToastPosition>
</SfToast>
<h3>Indice List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@IndexList" Toolbar="_toolbarItems" AllowPaging="true">
                <GridEditSettings AllowAdding="false" />
                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="IndiceDetailModel" />
                <GridTemplates>
                    <DetailTemplate>
                        @{
                            var indice = (context as IndiceDetailModel);
                            GetCompositionsForIndex(indice);
                            <h3>@indice.Name Compositions</h3>
                            <div class="row">
                                @if (indice.IndiceCompositions != null)
                                {
                                    <SfGrid DataSource="indice.IndiceCompositions">
                                        <GridTemplates>
                                            <DetailTemplate Context="child_context">
                                                @{
                                                    var composition = (child_context as IndiceCompositionModel);
                                                    <h4>@composition.Symbol Components</h4>
                                                    <div class="row">
                                                        <SfGrid DataSource="composition.Components">
                                                            <GridColumns>
                                                                <GridColumn Field="@nameof(ComponentDetailModel.Name)" AutoFit="true"></GridColumn>
                                                                <GridColumn Field="@nameof(ComponentDetailModel.Symbol)" AutoFit="true"></GridColumn>
                                                                <GridColumn Field="@nameof(ComponentDetailModel.Quantity)" AutoFit="true"></GridColumn>
                                                                <GridColumn Field="@nameof(ComponentDetailModel.Address)" AutoFit="true"></GridColumn>
                                                                <GridColumn Field="@nameof(ComponentDetailModel.CoinGeckoId)" AutoFit="true"></GridColumn>
                                                                <GridColumn Field="@nameof(ComponentDetailModel.Decimals)" AutoFit="true" TextAlign="TextAlign.Center"></GridColumn>
                                                            </GridColumns>
                                                        </SfGrid>
                                                    </div>
                                                }
                                            </DetailTemplate>
                                        </GridTemplates>
                                        <GridColumns>
                                            <GridColumn Field="@nameof(IndiceCompositionModel.Symbol)" AutoFit="true" MinWidth="150"></GridColumn>
                                            <GridColumn Field="@nameof(IndiceCompositionModel.Address)" AutoFit="true" MinWidth="400"></GridColumn>
                                            <GridColumn Field="@nameof(IndiceCompositionModel.CreationDate)" AutoFit="true" MinWidth="150" HeaderText="Creation Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
                                            <GridColumn Field="@nameof(IndiceCompositionModel.Version)" AutoFit="true" MinWidth="150" TextAlign="TextAlign.Center"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }

                            </div>
                        }
                    </DetailTemplate>
                </GridTemplates>
                <GridColumns>
                    <GridColumn Field=@nameof(IndiceDetailModel.Name) ValidationRules="@(new { required=true })" AutoFit="true"></GridColumn>
                    <GridColumn Field=@nameof(IndiceDetailModel.Symbol) ValidationRules="@(new { required=true})" AutoFit="true"></GridColumn>
                    <GridColumn Field=@nameof(IndiceDetailModel.IndiceState) HeaderText="Indice State" ValidationRules="@(new { required=true})" AutoFit="true"></GridColumn>
                    <GridColumn Field=@nameof(IndiceDetailModel.CreationDate) HeaderText="Creation Date" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
                    <GridColumn Field=@nameof(IndiceDetailModel.Address) EditType="EditType.DropDownEdit" AutoFit="true"></GridColumn>
                    <GridColumn Field=@nameof(IndiceDetailModel.NaturalUnit) EditType="EditType.DropDownEdit" TextAlign="TextAlign.Center" AutoFit="true"></GridColumn>
                    <GridColumn Field=@nameof(IndiceDetailModel.Description) EditType="EditType.DropDownEdit" AutoFit="true"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    public SfToast Toaster { get; set; }
    public ICollection<IndiceDetailModel> IndexList { get; set; }
    private List<Object> _toolbarItems = new List<Object>() { new ItemModel() { Text = "Create Indice", TooltipText = "You will be redirected to the create indice page.", PrefixIcon = "e-add", Id = "create-indice" },
        "Update", "ExcelExport", "PdfExport" };

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await GetIndexList();
        StateHasChanged();
    }

    public void ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        if (args.Item.Id == "create-indice")
        {
            NavManager.NavigateTo("./IndiceComposition/indice_creation");
        }
    }

    public async Task GetIndexList()
    {
        if (IndexList != null) return;
        try
        {
            IndexList = (await ApiClient.GetAllIndicesAsync()).Result;
        }
        catch
        {
            //add toaster to show error message to user, or log it in browser console.
        }
    }

    public async Task GetCompositionsForIndex(IndiceDetailModel indice)
    {
        if (indice.IndiceCompositions != null) return;
        try
        {
            var compositions = (await ApiClient.GetCompositionsBySymbolAsync(indice.Symbol)).Result;
            indice.IndiceCompositions = compositions;
            StateHasChanged();
        }
        catch
        {
            //add toaster to show error message to user, or log it in browser console.
        }
    }
}

