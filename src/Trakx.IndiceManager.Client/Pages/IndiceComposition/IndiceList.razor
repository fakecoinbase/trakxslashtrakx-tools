@page "/IndiceComposition/indice_list"
@using Syncfusion.Blazor.Grids

<h3>Indice List</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@GridData" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })" AllowPaging="true" >
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" />
                <GridTemplates>
                    <DetailTemplate>
                        @{
                            var indice = (context as IndiceModel);
                            <h3>@indice.Name Component details</h3>
                            <div class="row">
                                <SfGrid DataSource="indice.ComponentList">
                                    <GridColumns>
                                        <GridColumn Field="@nameof(ComponentModel.Symbol)"></GridColumn>
                                        <GridColumn Field="@nameof(ComponentModel.Weight)"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        }
                    </DetailTemplate>
                </GridTemplates>
                    <GridColumns>
                        <GridColumn Field=@nameof(IndiceModel.Id) IsPrimaryKey="true" ValidationRules="@(new { required=true })"></GridColumn>
                        <GridColumn Field=@nameof(IndiceModel.Name) ValidationRules="@(new { required=true })"></GridColumn>
                        <GridColumn Field=@nameof(IndiceModel.Symbol) ValidationRules="@(new { required=true})"></GridColumn>
                        <GridColumn Field=@nameof(IndiceModel.Nav) HeaderText="Net Asset Value" ValidationRules="@(new { required=true})" EditType="EditType.NumericEdit" Format="C2" TextAlign="TextAlign.Right"></GridColumn>
                        <GridColumn Field=@nameof(IndiceModel.Date) HeaderText="Creation Date" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right"></GridColumn>
                        <GridColumn Field=@nameof(IndiceModel.State) EditType="EditType.DropDownEdit"></GridColumn>
                    </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    //todo: take the data from the database

    private readonly List<IndiceModel> _indiceList = new List<IndiceModel>()
    {
        new IndiceModel("1","Indice1","IND1",123.98,IndiceModel.StateType.Published, new DateTime(2020, 04, 01),
            new List<ComponentModel>()
            {
                new ComponentModel("BAT",13.45),
                new ComponentModel("wXRP", 38.17),
                new ComponentModel("ETH", 70.32)
            }),
        new IndiceModel("2","Indice2", "IND2", 37.45, IndiceModel.StateType.Saved, new DateTime(2020, 05, 01),
            new List<ComponentModel>()
            {
                new ComponentModel("MKR", 49.18),
                new ComponentModel("wXTZ", 34.55)
            })
    };

    public List<IndiceModel> GridData { get; set; }

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        GridData = _indiceList;
    }

    #endregion

    #region IndiceModel class
    public class IndiceModel
    {
        public IndiceModel(string id, string name, string symbol, double nav, StateType state, DateTime date, List<ComponentModel> componentList)
        {
            Id = id;
            Name = name;
            Symbol = symbol;
            Nav = nav;
            State = state;
            Date = date;
            ComponentList = componentList;
        }

        public enum StateType { Saved, Published };

        public string Id { get; set; }
        public string Name { get; set; }
        public string Symbol { get; set; }
        public double Nav { get; set; }
        public StateType State { get; set; }
        public DateTime Date { get; set; }

        public List<ComponentModel> ComponentList;
        public int ComponentCount => ComponentList.Count;
    }

    public class ComponentModel
    {
        public ComponentModel(string symbol, double weight)
        {
            Symbol = symbol; Weight = weight;
        }

        public string Symbol { get; set; }
        public double Weight { get; set; }
    }
    #endregion

}

