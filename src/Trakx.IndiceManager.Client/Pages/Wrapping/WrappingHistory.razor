@page "/Wrapping/wrapping_history"
@using Syncfusion.Blazor.Grids

<h3>WrappingHistory</h3>

<SfGrid DataSource="@WrappingHistoryList" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel", "Search" })" AllowPaging="true">
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" />
    <GridColumns>
        <GridColumn Field=@nameof(WrappingHistoryModel.Id) IsPrimaryKey="true" AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.FromCurrency) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.ToCurrency) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.Amount) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.State) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.TxIdOnFromCurrencyChain) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.TxIdOnToCurrencyChain) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.SenderAddress) AutoFit="true"></GridColumn>
        <GridColumn Field=@nameof(WrappingHistoryModel.ReceiverAddress) AutoFit="true"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    public class WrappingHistoryModel
    {
        public enum StateType { Complete, Pending };

        public string Id { get; set; }
        public string FromCurrency { get; set; }
        public string ToCurrency { get; set; }
        public StateType State { get; set; }
        public DateTime Date { get; set; }
        public string TxIdOnFromCurrencyChain { get; set; }
        public string TxIdOnToCurrencyChain { get; set; }
        public double Amount { get; set; }
        public string SenderAddress { get; set; }
        public string ReceiverAddress { get; set; }

        public WrappingHistoryModel(string id, string fromCurrency, string toCurrency, StateType state, DateTime date)
        {
            Id = id; FromCurrency = fromCurrency; ToCurrency = toCurrency; State = state; Date = date;
        }
    }

    static private DateTime date1 = DateTime.MaxValue;
    static private DateTime date2 = DateTime.MinValue;

    public List<WrappingHistoryModel> WrappingHistoryList = new List<WrappingHistoryModel>()
{
        new WrappingHistoryModel("1","wXRP","XRP", WrappingHistoryModel.StateType.Complete, date1),
        new WrappingHistoryModel("2","BTC","wBTC",WrappingHistoryModel.StateType.Pending, date2)
    };

}
