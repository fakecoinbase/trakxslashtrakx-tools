@using System.ComponentModel.DataAnnotations
@using System.ComponentModel.Design.Serialization
@using System.Text.RegularExpressions
@using System.Threading
@using Trakx.Common.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@page "/Wrapping/wrap_unwrap_token"


<SfToast @ref="Toaster" TimeOut=3000>
    <ToastPosition X="Center" Y="Bottom"></ToastPosition>
</SfToast>
<h1>Wrap or Unwrap Tokens</h1>

<div class="container">
    <div>
        <EditForm OnValidSubmit="Success" OnInvalidSubmit="Failure" EditContext="@EditContext">
            <DataAnnotationsValidator />
            <fieldset>
                <div>
                    <div class="form-text">Select an option below to wrap or unwrap tokens:</div>
                    <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                        <SfTooltip Content="@WrappingTooltipContent">
                            <SfRadioButton Label="Wrap" Name="WrappingOperation" Value="Wrap"
                                           Checked="Model.Wrapping"
                                           CheckedChanged="WrappingOperationChanged" @ref="WrappingRadioButton" />
                        </SfTooltip>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                        <SfTooltip Content="@UnwrappingTooltipContent">
                            <SfRadioButton Label="Unwrap" Name="WrappingOperation" Value="Unwrap" />
                        </SfTooltip>
                    </div>
                </div>
                <div>
                    <div>
                        <div class="form-text">Choose the Currency you want to @SelectedWrappingOperation.ToLower()</div>
                        <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            <SfAutoComplete TValue="string" TItem="string" Placeholder="Currency" @bind-Value="Model.FromCurrency"
                                            DataSource="@CurrencyOptions" @ref="FromCurrencyTextBox">
                                <AutoCompleteFieldSettings Value="Text"></AutoCompleteFieldSettings>
                            </SfAutoComplete>
                        </div>
                    </div>
                    <div>
                        <div class="form-text">Amount you want to @SelectedWrappingOperation.ToLower()</div>
                        <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            <SfNumericTextBox TValue="decimal?" @bind-Value="Model.Amount" Max="10m" Min="1e-4m" Step="0.01m" Format="@AmountFormatString" @ref="AmountTextBox">
                            </SfNumericTextBox>
                        </div>
                    </div>
                    <div>
                        <div class="form-text h4">
                            You will need to send your @Model.FromCurrency tokens to the address:
                            <strong>@Model.AppReceivingAddress</strong>
                        </div>
                    </div>
                    <div>
                        <div class="form-text">Address from which you will send the @Model.FromCurrency tokens for @SelectedWrappingOperation.ToLower()ping</div>
                        <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            @if (Model.Wrapping)
                            {<SfTextBox @bind-Value="@Model.NativeAddress" @ref="WrappingFromAddress" /> }
                            else
                            {<SfTextBox @bind-Value="@Model.EthereumAddress" @ref="UnwrappingFromAddress" />}
                        </div>
                    </div>
                    <div>
                        <div class="form-text">In return you will receive @Model.ToCurrency @SelectedWrappingOperation.ToLower() tokens at the address of your choice.</div>
                        <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            @if (Model.Wrapping)
                            {<SfTextBox @bind-Value="@Model.EthereumAddress" @ref="WrappingToAddress" /> }
                            else
                            {<SfTextBox @bind-Value="@Model.NativeAddress" @ref="UnwrappingToAddress" />}
                        </div>
                    </div>
                    <div>
                        <SfButton IsPrimary="true" Disabled="IsSubmitDisabled" Type="submit">@SelectedWrappingOperation</SfButton>
                        <SfButton CssClass="e-outline" OnClick="Reset" @ref="ResetButton">Reset</SfButton>
                    </div>
                </div>
            </fieldset>
            <ValidationSummary />
        </EditForm>
    </div>
    <br /><br />
</div>


@code {
    public SfToast Toaster { get; set; }
    public SfAutoComplete<string, string> FromCurrencyTextBox { get; set; }
    public SfRadioButton WrappingRadioButton { get; set; }
    public SfNumericTextBox<decimal?> AmountTextBox { get; set; }
    public string AmountFormatString => $"#.#### {Model.FromCurrency}";
    public SfTextBox WrappingFromAddress { get; set; }
    public SfTextBox WrappingToAddress { get; set; }
    public SfTextBox UnwrappingFromAddress { get; set; }
    public SfTextBox UnwrappingToAddress { get; set; }
    public SfButton ResetButton { get; set; }

    public string WrappingTooltipContent = "Exchange native currency against its equivalent ERC20 representation";
    public string UnwrappingTooltipContent = "Redeem an ERC20 Wrapper token for its equivalent in native tokens";

    public EditContext EditContext { get; set; }
    public bool IsSubmitDisabled => !EditContext.Validate();

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Model);
    }

    private void Reset(MouseEventArgs args)
    {
        Model = new WrappingTransactionViewModel();
        EditContext = new EditContext(Model);
        StateHasChanged();
    }

    public void WrappingOperationChanged(bool newValue)
    {
        Model.Wrapping = newValue;
        if (FromCurrencyTextBox.Index.HasValue) Model.FromCurrency = CurrencyOptions[FromCurrencyTextBox.Index.Value];
        StateHasChanged();
    }
    /// <summary>
    /// Display a "Success" pop up (using MatToaster) when submission succeed.
    /// </summary>
    /// <returns></returns>
    public async Task Success()
    {
        await Toaster.Show(new ToastModel
        {
            Content = "Your transaction as been submitted successfully",
            Title = "Success !",
        });

        WrappingTransactionModel wrappingTransactionModel = Model.ToWrappingTransactionModel();

        //todo: httpclient request once Wrapping route will be available
    }
    /// <summary>
    /// Display an "Error" pop up (using MatToaster) when submission failed.
    /// </summary>
    /// <returns></returns>
    public async Task Failure()
    {
        await Toaster.Show(new ToastModel
        {
            Content = "Your transaction failed, please make sure that you filled correctly the form.",
            Title = "Error !",
        });
    }



    /// <summary>
    /// Simply returns a string "Wrap" or "Unwrap" display in submit button, according To the option selected.
    /// </summary>
    /// <returns></returns>
    public string SelectedWrappingOperation => Model.Wrapping ? "Wrap" : "Unwrap";

    private readonly string[] _availableCurrencies = { "BTC", "LTC", "XRP", "XTZ" };

    public List<string> CurrencyOptions => _availableCurrencies.Select(c => (Model.Wrapping ? "" : "w") + c).ToList();

    public WrappingTransactionViewModel Model = new WrappingTransactionViewModel();


    public class WrappingTransactionViewModel
    {
        private const string EthereumAddressPattern = "^0x[a-fA-F0-9]{40}$";
        private const string NativeAddressPattern = ".*";

        [Required]
        public bool Wrapping { get; set; }

        [Required]
        public string? FromCurrency { get; set; }

        //todo: have a Get request initialing the ToCurrency according to the wrap/unwrap FromCurrency [Required]
        public string? ToCurrency { get; set; }

        public DateTime CreationDate { get; set; }

        [Required, Range(1e-4, 10)]
        public decimal? Amount { get; set; }

        [Required, RegularExpression(EthereumAddressPattern)]
        public string? EthereumAddress { get; set; }

        [Required, RegularExpression(NativeAddressPattern)]
        public string? NativeAddress { get; set; }

        public string AppReceivingAddress { get; set; }

        public WrappingTransactionViewModel()
        {
            CreationDate = DateTime.Now;
            Wrapping = true;
            AppReceivingAddress = "Coinbase-custody-address";
        }

        public WrappingTransactionViewModel(bool wrapping, string crypto, decimal amount, string ethereumAddress, string nativeAddress)
        {
            CreationDate = DateTime.Now;
            EthereumAddress = ethereumAddress;
            NativeAddress = nativeAddress;
            Wrapping = wrapping;
            FromCurrency = crypto;
            Amount = amount;
        }

        public WrappingTransactionModel ToWrappingTransactionModel()
        {
            var newModel = new WrappingTransactionModel();

            newModel.TrakxAddress = AppReceivingAddress;
            if (Wrapping)
            {
                newModel.SenderAddress = NativeAddress;
                newModel.ReceiverAddress = EthereumAddress;
            }
            else
            {
                newModel.SenderAddress = EthereumAddress;
                newModel.ReceiverAddress = NativeAddress;
            }
            newModel.Date = CreationDate;
            newModel.FromCurrency = FromCurrency;
            newModel.ToCurrency = ToCurrency;

            return newModel;
        }
    }

}