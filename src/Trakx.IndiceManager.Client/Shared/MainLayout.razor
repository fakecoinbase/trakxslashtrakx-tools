@inherits LayoutComponentBase
@inject NavigationManager navigationManager

<MatToastContainer />
<MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="@bbDrawerClass">
    <MatDrawer @bind-Opened="@_navMenuOpened">
        <header class="drawer-header">
            <div class="drawer-logo">
                <img alt="Indice Manager" class="logo-img" src="images/trakx_logo.jpg" title="Indice Manager">
                <a class="miniHover" href="/"> Indice Manager</a>
            </div>
        </header>
        <NavMenu/>
    </MatDrawer>
    <MatDrawerContent>
        <MatAppBarContainer>
            <MatAppBar Fixed="true">
                <MatAppBarRow>
                    <MatAppBarSection>
                        <MatAppBarTitle>

                        </MatAppBarTitle>
                        <div class="hidden-mdc-down">
                            <MatTooltip Tooltip="Toggle Navigation">
                                <MatIconButton Class="navToggle" Icon="menu" ToggleIcon="menu" OnClick="@((e) => NavToggle())" RefBack="@context"></MatIconButton>
                            </MatTooltip>
                            <MatTooltip Tooltip="Minify Navigation">
                                <MatIconButton Class="navToggle" Icon="format_indent_decrease" ToggleIcon="format_indent_increase" OnClick="@((e) => NavMinify())" RefBack="@context"></MatIconButton>
                            </MatTooltip>
                        </div>
                    </MatAppBarSection>
                </MatAppBarRow>
            </MatAppBar>
            <MatAppBarContent>
                <section class="container-fluid">
                    @Body
                </section>
            </MatAppBarContent>
        </MatAppBarContainer>
    </MatDrawerContent>
</MatDrawerContainer>

@code {
    bool _navMenuOpened = true;
    bool _navMinified = false;
    public string bbDrawerClass = "";


    private void CallLogin()
    {
        var returnUrl =
              navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.NavigateTo($"/account/Login/{returnUrl}", forceLoad: false);
    }
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }


    void NavToggle()
    {
        _navMenuOpened = !_navMenuOpened;
        if (_navMenuOpened)
        {
            bbDrawerClass = "full";
        }
        else
        {
            bbDrawerClass = "closed";
        }

        this.StateHasChanged();
    }

    void NavMinify()
    {
        _navMinified = !_navMinified;

        if (!_navMenuOpened)
        {
            _navMinified = true;
        }

        if (_navMinified)
        {
            bbDrawerClass = "mini";
            _navMenuOpened = true;
        }
        else if (_navMenuOpened)
        {
            bbDrawerClass = "full";
        }

        _navMenuOpened = true;
        this.StateHasChanged();
    }
}
